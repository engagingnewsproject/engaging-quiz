$breakpoints: (
  "small"  : 400px,
  "medium" : 700px,
  "large"  : 1000px
);

// -----------------------------------------------------------------------------
// Core
// -----------------------------------------------------------------------------

// Caching current breakpoint
// Not meant to be manually edited
$default-breakpoint: root;
$current-breakpoint: $default-breakpoint;

// Caching existing placeholders
// Not meant to be manually edited
$placeholders: ();

// The usual breakpoint mixin
// Except it updates the $current-breakpoint variable
// 1. If breakpoint name exists in map
// 2. Update $current-breakpoint
// 3. Open a media query
// 4. Let the user dump content
// 5. Then reset $current-breakpoint
// 6. If breakpoint name doesn't exist in map, warn the user
@mixin breakpoint($breakpoint) {
  $value: map-get($breakpoints, $breakpoint);

  @if $value != null {                                    // 1
    $current-breakpoint: $breakpoint         !global;     // 2
    @media (min-width: $value) { @content; }              // 3
    $current-breakpoint: $default-breakpoint !global;     // 5
  }

  @else {
    @warn "Invalid breakpoint `#{$breakpoint}`.";         // 6
  }
}

// Generating placeholders
// actually generating one placeholder per breakpoint
// 1. If placeholder doesn't exist yet
// 2. Store the name
// 3. Looping through all the breakpoints
// 4. Opening a media query
// 5. Generating a placeholder at root level
// 6. With desired content
// 7. And dumping a placeholder out of any media query
// 8. If placeholder already exist, warn the user
@mixin placeholder($name) {
  @if not index($placeholders, $name) {                  // 1
    $placeholders: append($placeholders, $name) !global; // 2

    @at-root {
      @each $breakpoint, $value in $breakpoints {        // 3
        @media (min-width: $value) {                     // 4
          %#{$name}-#{$breakpoint} {                     // 5
            @content;                                    // 6
          }
        }
      }

      %#{$name}-#{$default-breakpoint} {                 // 7
        @content;
      }
    }
  }

  @else {
    @warn "Placeholder `#{$name}` already exists.";      // 8
  }
}

// Extend the accurate placeholder
// according to the current scope
// Basically instead of doing:
//    @extend %clear;
// You go:
//    @include _(clear);
// Not much longer, is it?
@mixin _($name) {
  @extend %#{$name}-#{$current-breakpoint} !optional;
}

// for only targeting a specific device
// NOTE: DOESN'T SUPPORT THE @include _(placeholders)!!!
@mixin media($query) {
    @if $query == max-small {
        $media_query: "max-width: #{map-get($breakpoints, "small")}";
    } @else if $query == only-medium {
        $media_query: "min-width: #{map-get($breakpoints, "medium")}) and (max-width: #{(map-get($breakpoints, "large") - 1px)}";
    } @else if $query == max-medium {
        $media_query: "max-width: #{(map-get($breakpoints, "medium") - 1px)}";
    } @else if $query == max-large {
        $media_query: "max-width: #{(map-get($breakpoints, "large") - 1px)}";
    } @else {
        // just use the number provided as a max width
        $media_query: "max-width: #{$query}";
    }

    @media ($media_query) {
        @content;
    }

}

@include placeholder('green') {
    color: $green;
}

@include placeholder('dark-green') {
    color: $dark_green;
}

@include placeholder('red') {
    color: $red;
}

@include placeholder('fade-red') {
    color: $fade_red;
}

/* Text meant only for screen readers */
@include placeholder(screen-reader-text) {
    clip: rect(1px, 1px, 1px, 1px);
    position: absolute !important;
}

@include placeholder(screen-reader-text--hover) {
    background-color: #f1f1f1;
    border-radius: 3px;
    box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.6);
    clip: auto !important;
    color: #21759b;
    display: block;
    font-size: 14px;
    font-weight: bold;
    height: auto;
    left: 5px;
    line-height: normal;
    padding: 15px 23px 14px;
    text-decoration: none;
    top: 5px;
    width: auto;
    z-index: 100000;
}

@include placeholder('xmargin-vertical') {
    margin-top: 2rem;
    margin-bottom: 2rem;
}

@include placeholder('xmargin-horizontal') {
    margin-right: 2rem;
    margin-left: 2rem;
}

@include placeholder('xpadding-vertical') {
    padding-top: 2rem;
    padding-bottom: 2rem;
}

@include placeholder('xpadding-horizontal') {
    padding-right: 2rem;
    padding-left: 2rem;
}

@include placeholder('ul-no-style') {
    list-style: none;
    margin-left: 0;
}

@include placeholder('well') {
    padding: 1.6rem;
    margin-bottom: 1.6rem;
    background: #fff;
    border: 1px solid #eee;
    border-bottom-color: #ccc;

    @include breakpoint(medium) {
        margin-bottom: 2.6rem;
        padding: 1.6rem 2rem;
    }
}

@include placeholder('hidden--accessible') {
    height: 0;
    opacity: 0;
    padding: 0;
    overflow: hidden;
}

// Share Icons
@mixin share_icons($rootBEM) {

    .#{$rootBEM} {
        @include _(ul-no-style);
        text-align: center;
    }

    .#{$rootBEM}__item {
        display: inline-block;
        margin-right: 20px;

        &:last-child {
            margin-right: 0;
        }
    }

    .#{$rootBEM}__item__icon {
        @include _(icon--circle--pad);
        padding: .6rem;
        @include _(icon--xxl);
        fill: #fff!important;
    }

    .#{$rootBEM}__item__icon--facebook {
        background-color: #3a5795;
    }

    .#{$rootBEM}__item__icon--twitter {
        background-color: #4099ff;
    }
}

@include placeholder(section--alt) {
    background: $light_gray;
    border-bottom: 1px solid #ddd;
    border-top: 1px solid #ddd;
    padding-top: 3rem;
    padding-bottom: 3rem;
    margin-top: 3rem;
    margin-bottom: 3rem;
}

#enp-quiz {
    .enp-screen-reader-text {
        @include _(screen-reader-text);
    }

    .enp-screen-reader-text:hover,
    .enp-screen-reader-text:active,
    .enp-screen-reader-text:focus {
        @include _(screen-reader-text--hover);
    }
}

@include placeholder('focus--glow') {
    outline-color: #4D90FE;
    outline-offset: -2px;
    outline-style: auto;
    outline-width: 5px;
}

#enp-quiz {

    .enp-quiz-message {
        @include _(container);
        max-width: 400px;
        background: #fff;
        border: 1px solid #eee;
        border-bottom: 1px solid #ccc;
        padding: 1rem 0.375rem;
        margin-top: 1.6rem;
        margin-bottom: 1.6rem;
    }

    .enp-quiz-message__title {
        @include _(small-uppercase);
    }

    .enp-message__list {
        @include _(ul-no-style);
        font-size: 1.1rem;
        margin-bottom: 0;
    }

    .enp-quiz-message--error {
        border-left: 6px solid $red;
        color: $dark_red;
    }

    .enp-quiz-message__title--error {
        color: $dark_red;
    }

    .enp-quiz-message--success {
        border-left: 6px solid $green;
        color: $dark_green;
    }

    .enp-quiz-message__title--success {
        color: $dark_green;
    }

}
